import os 
import sys 
from src.exception import CustomException 
from src.logger import logging 

import pandas as pd 
from sklearn.model_selection import train_test_split 
from dataclasses import dataclass

@dataclass 
class DataIngestionConfig:
    train_data_path: str = os.path.join("artifact", "train.csv")
    test_data_path: str = os.path.join("artifact", "test.csv")
    raw_data_path: str = os.path.join("artifact", "data.csv")

class DataIngestion:
    # constructor 
    def __init__(self):
        '''
        when DataIngestion class gets called, a variable ingestion_config will 
        contain the varaibles from the DataIngestionConfig class 
        '''
        self.ingestion_config = DataIngestionConfig()
    # read in data set 
    # can be configured to read data from a database 
    def initiate_data_ingestion(self): 
        logging.info("In DataIngestion class - starting initaite_data_ingestion func")
        try: 
            df = pd.read_csv("notebook\data\heart_disease_uci.csv")
            logging.info("Successfully read csv file as a dataframe")

            # create folders/directories for training, test, and raw data 
            os.makedirs(os.path.dirname(self.ingestion_config.train_data_path), exist_ok = True)

            # save dataframe with all data into a csv file 
            df.to_csv(self.ingestion_config.raw_data_path, index = False, header = True)

            logging.info("Train, Test, Split started")
            train_set, test_set = train_test_split(df, test_size = 0.2, random_state = 42)

            # savid training and test sets as csv files in their respective paths generated by ingestion_config 
            train_set.to_csv(self.ingestion_config.train_data_path, index = False, header = True)
            test_set.to_csv(self.ingestion_config.test_data_path, index = False, header = True)

            logging.info("Data ingestion is completed")

            # return back file paths generated for training and testing data 
            return (self.ingestion_config.train_data_path, self.ingestion_config.test_data_path)
        except Exception as e: 
            raise CustomException(e, sys)
        
if __name__ == "__main__":
    obj = DataIngestion()
    obj.initiate_data_ingestion()
